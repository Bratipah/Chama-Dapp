[ap + 0] = [fp + -4] * 65536, ap++;
[ap + 0] = [ap + -1] + [fp + -3], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1374587892678323227195797658091058581998481474457735682590195586262759633693, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -14] = [[fp + -13] + 1];
[ap + -3] = [[fp + -13] + 2];
[ap + -2] = [[fp + -13] + 3];
[fp + -12] = [[fp + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13]) %}
[ap + 0] = [[fp + -13] + 6], ap++;
jmp rel 552 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1630829733775233318195679090436104892768056024564011680791087339675912017005, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 7];
[ap + -4] = [[fp + -13] + 8];
[ap + -3] = [[fp + -13] + 9];
[ap + -2] = [[fp + -13] + 10];
[fp + -11] = [[fp + -13] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 7) %}
[ap + 0] = [[fp + -13] + 13], ap++;
jmp rel 526 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 507417100519034057008297464956665249334164166107291559563484601592847731467, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 14];
[ap + -4] = [[fp + -13] + 15];
[ap + -3] = [[fp + -13] + 16];
[ap + -2] = [[fp + -13] + 17];
[fp + -10] = [[fp + -13] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 14) %}
[ap + 0] = [[fp + -13] + 20], ap++;
jmp rel 500 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 30794031068664177830532931040761895071588931353348328224300295652818105828, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 21];
[ap + -4] = [[fp + -13] + 22];
[ap + -3] = [[fp + -13] + 23];
[ap + -2] = [[fp + -13] + 24];
[fp + -9] = [[fp + -13] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 21) %}
[ap + 0] = [[fp + -13] + 27], ap++;
jmp rel 474 if [ap + -1] != 0;
[ap + 0] = 30794031068664177830532931040761895071588931353348328224300295652818105828, ap++;
[ap + 0] = [[fp + -13] + 26], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 28];
[ap + -4] = [[fp + -13] + 29];
[ap + -3] = [[fp + -13] + 30];
[ap + -2] = [[fp + -13] + 31];
[fp + -8] = [[fp + -13] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 28) %}
[ap + 0] = [[fp + -13] + 34], ap++;
jmp rel 446 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 33], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 900542180392366454148948293090091998379728277675000416022170242083806241045, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 35];
[ap + -4] = [[fp + -13] + 36];
[ap + -3] = [[fp + -13] + 37];
[ap + -2] = [[fp + -13] + 38];
[fp + -7] = [[fp + -13] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 35) %}
[ap + 0] = [[fp + -13] + 41], ap++;
jmp rel 420 if [ap + -1] != 0;
[ap + 0] = 900542180392366454148948293090091998379728277675000416022170242083806241045, ap++;
[ap + 0] = [[fp + -13] + 40], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 42];
[ap + -4] = [[fp + -13] + 43];
[ap + -3] = [[fp + -13] + 44];
[ap + -2] = [[fp + -13] + 45];
[fp + -6] = [[fp + -13] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 42) %}
[ap + 0] = [[fp + -13] + 48], ap++;
jmp rel 392 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 47], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 578959489375621217077029324957322035457629557594010795674134564319474381187, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 49];
[ap + -4] = [[fp + -13] + 50];
[ap + -3] = [[fp + -13] + 51];
[ap + -2] = [[fp + -13] + 52];
[fp + -5] = [[fp + -13] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 49) %}
[ap + 0] = [[fp + -13] + 55], ap++;
jmp rel 366 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 54], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1356903408909024234806913891847579588644392148723634888669658667113490323602, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 56];
[ap + -4] = [[fp + -13] + 57];
[ap + -3] = [[fp + -13] + 58];
[ap + -2] = [[fp + -13] + 59];
[fp + -4] = [[fp + -13] + 60];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 56) %}
[ap + 0] = [[fp + -13] + 62], ap++;
jmp rel 340 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 61], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 314295661781227121108470737228459134249686658980985317236390866122496298342, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 63];
[ap + -4] = [[fp + -13] + 64];
[ap + -3] = [[fp + -13] + 65];
[ap + -2] = [[fp + -13] + 66];
[fp + -3] = [[fp + -13] + 67];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 63) %}
[ap + 0] = [[fp + -13] + 69], ap++;
jmp rel 314 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 68], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1153431758152617002674809172345379817267606445825896141478041208762844152223, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 70];
[ap + -5] = [[fp + -13] + 71];
[ap + -4] = [[fp + -13] + 72];
[ap + -3] = [[fp + -13] + 73];
[ap + -2] = [[fp + -13] + 74];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 70) %}
[ap + 0] = [[fp + -13] + 76], ap++;
jmp rel 286 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 75], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1603808399645893077226999146436512301390740438349822149456821856936905775949, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 77];
[ap + -5] = [[fp + -13] + 78];
[ap + -4] = [[fp + -13] + 79];
[ap + -3] = [[fp + -13] + 80];
[ap + -2] = [[fp + -13] + 81];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 77) %}
[ap + 0] = [[fp + -13] + 83], ap++;
jmp rel 258 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 82], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 459088842393652775078779672892360605058768068423935561374767379127816985755, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 84];
[ap + -5] = [[fp + -13] + 85];
[ap + -4] = [[fp + -13] + 86];
[ap + -3] = [[fp + -13] + 87];
[ap + -2] = [[fp + -13] + 88];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 84) %}
[ap + 0] = [[fp + -13] + 90], ap++;
jmp rel 230 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 89], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 725830221483990777176774397100391313622024035615321701228361226644626740815, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 91];
[ap + -5] = [[fp + -13] + 92];
[ap + -4] = [[fp + -13] + 93];
[ap + -3] = [[fp + -13] + 94];
[ap + -2] = [[fp + -13] + 95];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 91) %}
[ap + 0] = [[fp + -13] + 97], ap++;
jmp rel 202 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 96], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -13] + 98];
[ap + -2] = [[fp + -13] + 99];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 98) %}
[ap + 0] = [[fp + -13] + 101], ap++;
jmp rel 183 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 102], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + memory[fp + -3]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -15] + 0];
jmp rel 158;
[ap + 1] = [ap + -2] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[fp + -15] + 0];
[ap + 0] = [[fp + -13] + 100], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 710045654234148520171187225065630606488213002833401497650569757716452749872, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 103];
[ap + -4] = [[fp + -13] + 104];
[ap + -3] = [[fp + -13] + 105];
[ap + -2] = [[fp + -13] + 106];
[ap + -5] = [[fp + -13] + 107];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 103) %}
[ap + 0] = [[fp + -13] + 109], ap++;
jmp rel 127 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
jmp rel [ap + -6];
jmp rel 59;
jmp rel 39;
jmp rel 21;
[ap + 0] = [[fp + -13] + 108], ap++;
[ap + 0] = 553946278156203491522487009125944156509105080517783764306022585230501188954, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
jmp rel 53;
[ap + 0] = [[fp + -13] + 108], ap++;
[ap + 0] = 1659622917305625390749334795371986947600403449938397185716138391485174031757, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -9] + 0];
[ap + -3] = [[ap + -9] + 1];
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 2, ap++;
jmp rel 37;
[ap + 0] = [[fp + -13] + 108], ap++;
[ap + 0] = 880061577066792731595429565469645176813718464796772741938032589769663479688, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
jmp rel 19;
[ap + 0] = [[fp + -13] + 108], ap++;
[ap + 0] = 1355523531718876977779483585399229452393057587437361147276783574556348248496, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -13] + 110];
[ap + -6] = [[fp + -13] + 111];
[ap + -5] = [[fp + -13] + 112];
[ap + -4] = [[fp + -13] + 113];
[ap + -3] = [[fp + -13] + 114];
[ap + -2] = [[fp + -13] + 115];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 110) %}
[ap + 0] = [[fp + -13] + 117], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 116], ap++;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -13] + 118, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [[fp + -13] + 116], ap++;
[ap + 0] = [fp + -13] + 120, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 118], ap++;
[ap + 0] = [[fp + -13] + 119], ap++;
ret;
ap += 18;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [[fp + -13] + 108], ap++;
[ap + 0] = [fp + -13] + 112, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 110], ap++;
[ap + 0] = [[fp + -13] + 111], ap++;
ret;
ap += 15;
call rel 8316;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [[fp + -13] + 100], ap++;
[ap + 0] = [fp + -13] + 103, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 29;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 100], ap++;
[ap + 0] = [fp + -13] + 104, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 102], ap++;
[ap + 0] = [[fp + -13] + 103], ap++;
ret;
ap += 32;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 96], ap++;
[ap + 0] = [fp + -13] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 98], ap++;
[ap + 0] = [[fp + -13] + 99], ap++;
ret;
ap += 38;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 89], ap++;
[ap + 0] = [fp + -13] + 93, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 91], ap++;
[ap + 0] = [[fp + -13] + 92], ap++;
ret;
ap += 44;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 82], ap++;
[ap + 0] = [fp + -13] + 86, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 84], ap++;
[ap + 0] = [[fp + -13] + 85], ap++;
ret;
ap += 50;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 75], ap++;
[ap + 0] = [fp + -13] + 79, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 77], ap++;
[ap + 0] = [[fp + -13] + 78], ap++;
ret;
ap += 56;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 68], ap++;
[ap + 0] = [fp + -13] + 72, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 70], ap++;
[ap + 0] = [[fp + -13] + 71], ap++;
ret;
ap += 61;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 61], ap++;
[ap + 0] = [fp + -13] + 65, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 63], ap++;
[ap + 0] = [[fp + -13] + 64], ap++;
ret;
ap += 66;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 54], ap++;
[ap + 0] = [fp + -13] + 58, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 56], ap++;
[ap + 0] = [[fp + -13] + 57], ap++;
ret;
ap += 71;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 47], ap++;
[ap + 0] = [fp + -13] + 51, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 49], ap++;
[ap + 0] = [[fp + -13] + 50], ap++;
ret;
ap += 77;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 40], ap++;
[ap + 0] = [fp + -13] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 42], ap++;
[ap + 0] = [[fp + -13] + 43], ap++;
ret;
ap += 82;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 33], ap++;
[ap + 0] = [fp + -13] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 35], ap++;
[ap + 0] = [[fp + -13] + 36], ap++;
ret;
ap += 88;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 26], ap++;
[ap + 0] = [fp + -13] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 28], ap++;
[ap + 0] = [[fp + -13] + 29], ap++;
ret;
ap += 93;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = [fp + -13] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 21], ap++;
[ap + 0] = [[fp + -13] + 22], ap++;
ret;
ap += 98;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = [fp + -13] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 14], ap++;
[ap + 0] = [[fp + -13] + 15], ap++;
ret;
ap += 103;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [fp + -13] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 7], ap++;
[ap + 0] = [[fp + -13] + 8], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1374587892678323227195797658091058581998481474457735682590195586262759633693, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 705 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 6], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 656 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1630829733775233318195679090436104892768056024564011680791087339675912017005, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 7];
[ap + -4] = [[fp + -3] + 8];
[ap + -3] = [[fp + -3] + 9];
[ap + -2] = [[fp + -3] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 7) %}
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 606 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 13], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 2], ap++;
[ap + -4] = [[fp + -5] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 4];
jmp rel 559;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 2], ap++;
[ap + -3] = [[fp + -5] + 3], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 4];
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 507417100519034057008297464956665249334164166107291559563484601592847731467, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 14];
[ap + -4] = [[fp + -3] + 15];
[ap + -3] = [[fp + -3] + 16];
[ap + -2] = [[fp + -3] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 14) %}
[ap + 0] = [[fp + -3] + 19], ap++;
jmp rel 507 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 20], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 5], ap++;
[ap + -4] = [[fp + -5] + 6], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 7];
jmp rel 460;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 5], ap++;
[ap + -3] = [[fp + -5] + 6], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 7];
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -3] + 18], ap++;
[ap + 0] = [fp + -3] + 21, ap++;
[ap + 0] = 30794031068664177830532931040761895071588931353348328224300295652818105828, ap++;
call rel 8027;
jmp rel 413 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 900542180392366454148948293090091998379728277675000416022170242083806241045, ap++;
call rel 8018;
jmp rel 376 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 578959489375621217077029324957322035457629557594010795674134564319474381187, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -8] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 334 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 6], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 285 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1356903408909024234806913891847579588644392148723634888669658667113490323602, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -15] + 7];
[ap + -4] = [[ap + -15] + 8];
[ap + -3] = [[ap + -15] + 9];
[ap + -2] = [[ap + -15] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15] + 7) %}
[ap + 0] = [[ap + -15] + 12], ap++;
jmp rel 235 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 13], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -23] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -25] + 3], ap++;
[ap + -5] = [[ap + -26] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 186 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -20] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -21] + 3];
[ap + 0] = [[ap + -19] + 11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 314295661781227121108470737228459134249686658980985317236390866122496298342, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -23] + 14];
[ap + -4] = [[ap + -23] + 15];
[ap + -3] = [[ap + -23] + 16];
[ap + -2] = [[ap + -23] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23] + 14) %}
[ap + 0] = [[ap + -23] + 19], ap++;
jmp rel 136 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 20], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -31] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -33] + 5], ap++;
[ap + -5] = [[ap + -34] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 89 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -28] + 4];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -29] + 5];
ap += 3;
[ap + 0] = [[ap + -30] + 18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1153431758152617002674809172345379817267606445825896141478041208762844152223, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -34] + 21];
[ap + -4] = [[ap + -34] + 22];
[ap + -3] = [[ap + -34] + 23];
[ap + -2] = [[ap + -34] + 24];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34] + 21) %}
[ap + 0] = [[ap + -34] + 26], ap++;
jmp rel 37 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 27], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[ap + -36] + 25], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[ap + -36] + 25], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -42] + 6, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -42] + 28, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -147], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -130], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + -15] = [ap + 0] + [ap + -16], ap++;
ret;
ap += 5;
[ap + 0] = [ap + -42] + 6, ap++;
[ap + 0] = [[ap + -41] + 25], ap++;
[ap + 0] = [ap + -42] + 29, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -53] + 27], ap++;
[ap + 0] = [[ap + -54] + 28], ap++;
ret;
call rel 7960;
[ap + 0] = [ap + -42] + 7, ap++;
[ap + 0] = [[ap + -41] + 18], ap++;
[ap + 0] = [ap + -42] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 16;
[ap + 0] = [ap + -42] + 4, ap++;
[ap + 0] = [[ap + -41] + 18], ap++;
[ap + 0] = [ap + -42] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -53] + 20], ap++;
[ap + 0] = [[ap + -54] + 21], ap++;
ret;
ap += 8;
call rel 7903;
[ap + 0] = [ap + -42] + 5, ap++;
[ap + 0] = [[ap + -41] + 11], ap++;
[ap + 0] = [ap + -42] + 14, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 24;
[ap + 0] = [ap + -42] + 2, ap++;
[ap + 0] = [[ap + -41] + 11], ap++;
[ap + 0] = [ap + -42] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -53] + 13], ap++;
[ap + 0] = [[ap + -54] + 14], ap++;
ret;
ap += 16;
call rel 7841;
[ap + 0] = [ap + -42] + 3, ap++;
[ap + 0] = [[ap + -41] + 4], ap++;
[ap + 0] = [ap + -42] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 32;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [[ap + -41] + 4], ap++;
[ap + 0] = [ap + -42] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -53] + 6], ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
ret;
ap += 36;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
ret;
ap += 77;
[ap + 0] = [ap + -83], ap++;
[ap + 0] = [ap + -83], ap++;
[ap + 0] = [ap + -83], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -92], ap++;
ret;
ap += 109;
call rel 7729;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -3] + 18], ap++;
[ap + 0] = [fp + -3] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 124;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[fp + -3] + 18], ap++;
[ap + 0] = [fp + -3] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -3] + 20], ap++;
[ap + 0] = [[fp + -3] + 21], ap++;
ret;
ap += 120;
call rel 7667;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 14, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 135;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -3] + 13], ap++;
[ap + 0] = [[fp + -3] + 14], ap++;
ret;
ap += 127;
call rel 7595;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 143;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1153431758152617002674809172345379817267606445825896141478041208762844152223, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 676 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 85;
call rel 7517;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1603808399645893077226999146436512301390740438349822149456821856936905775949, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 618 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 13], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 586 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1356903408909024234806913891847579588644392148723634888669658667113490323602, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 14];
[ap + -4] = [[fp + -4] + 15];
[ap + -3] = [[fp + -4] + 16];
[ap + -2] = [[fp + -4] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 14) %}
[ap + 0] = [[fp + -4] + 19], ap++;
jmp rel 553 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 20], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -7] + 3], ap++;
[ap + -5] = [[fp + -7] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 521 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -7] + 3];
[ap + -11] = [ap + 1] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 18;
[ap + -1] = [[fp + -7] + 4];
ap += 68;
call rel 7426;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -4] + 18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 178655824489502327769759410780782113083476808520271356765681597503482464105, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 5], ap++;
[ap + -4] = [[fp + -7] + 6], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 7];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 6], ap++;
[ap + -7] = [[fp + -7] + 7];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -4] + 18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 21];
[ap + -3] = [[fp + -4] + 22];
[ap + -2] = [[fp + -4] + 23];
[ap + -4] = [[fp + -4] + 24];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 21) %}
[ap + 0] = [[fp + -4] + 26], ap++;
jmp rel 431 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 27], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 8], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -7] + 9], ap++;
[ap + -5] = [[fp + -7] + 10];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 398 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 8];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -7] + 9];
jmp rel 374 if [ap + -3] != 0;
[ap + -30] = [ap + 0] + 65535, ap++;
jmp rel 18 if [ap + -1] != 0;
ap += 50;
call rel 7341;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = [[fp + -4] + 25], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 28, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = 1635809615704332091889448403429097910573595942270939993383771697683339498350, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + -2] = [[fp + -5] + 4];
[ap + 0] = [[fp + -5] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 10], ap++;
[ap + -4] = [[fp + -7] + 11], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 12];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 10], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 11], ap++;
[ap + -7] = [[fp + -7] + 12];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -4] + 25], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 28];
[ap + -3] = [[fp + -4] + 29];
[ap + -2] = [[fp + -4] + 30];
[ap + -4] = [[fp + -4] + 31];
[fp + -3] = [[fp + -4] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 28) %}
[ap + 0] = [[fp + -4] + 34], ap++;
jmp rel 291 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 33], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1603808399645893077226999146436512301390740438349822149456821856936905775949, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 35];
[ap + -4] = [[fp + -4] + 36];
[ap + -3] = [[fp + -4] + 37];
[ap + -2] = [[fp + -4] + 38];
[ap + -18] = [[fp + -4] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 35) %}
[ap + 0] = [[fp + -4] + 41], ap++;
jmp rel 262 if [ap + -1] != 0;
[ap + 0] = 178655824489502327769759410780782113083476808520271356765681597503482464105, ap++;
[ap + -1] = [[fp + -5] + 6];
[fp + -3] = [[fp + -5] + 7];
[ap + 0] = [[fp + -5] + 8], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 13], ap++;
[ap + -4] = [[fp + -7] + 14], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 15];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 13], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 14], ap++;
[ap + -7] = [[fp + -7] + 15];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -4] + 40], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 42];
[ap + -3] = [[fp + -4] + 43];
[ap + -2] = [[fp + -4] + 44];
[ap + -4] = [[fp + -4] + 45];
[ap + -31] = [[fp + -4] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 42) %}
[ap + 0] = [[fp + -4] + 48], ap++;
jmp rel 201 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 47], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1374587892678323227195797658091058581998481474457735682590195586262759633693, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 49];
[ap + -4] = [[fp + -4] + 50];
[ap + -3] = [[fp + -4] + 51];
[ap + -2] = [[fp + -4] + 52];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 49) %}
[ap + 0] = [[fp + -4] + 54], ap++;
jmp rel 173 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 55], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 16], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -7] + 17], ap++;
[ap + -5] = [[fp + -7] + 18];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 140 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 16];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 17];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel [ap + -6];
jmp rel 59;
jmp rel 39;
jmp rel 21;
[ap + 0] = [[fp + -4] + 53], ap++;
[ap + 0] = 553946278156203491522487009125944156509105080517783764306022585230501188954, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
jmp rel 53;
[ap + 0] = [[fp + -4] + 53], ap++;
[ap + 0] = 1659622917305625390749334795371986947600403449938397185716138391485174031757, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -9] + 0];
[ap + -3] = [[ap + -9] + 1];
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 2, ap++;
jmp rel 37;
[ap + 0] = [[fp + -4] + 53], ap++;
[ap + 0] = 880061577066792731595429565469645176813718464796772741938032589769663479688, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
jmp rel 19;
[ap + 0] = [[fp + -4] + 53], ap++;
[ap + 0] = 1355523531718876977779483585399229452393057587437361147276783574556348248496, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -4] + 56];
[ap + -6] = [[fp + -4] + 57];
[ap + -5] = [[fp + -4] + 58];
[ap + -4] = [[fp + -4] + 59];
[ap + -3] = [[fp + -4] + 60];
[ap + -2] = [[fp + -4] + 61];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 56) %}
[ap + 0] = [[fp + -4] + 63], ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 62], ap++;
[ap + 0] = [fp + -7] + 18, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [fp + -4] + 64, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [fp + -7] + 18, ap++;
[ap + 0] = [[fp + -4] + 62], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [fp + -4] + 66, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 64], ap++;
[ap + 0] = [[fp + -4] + 65], ap++;
ret;
ap += 5;
call rel 7020;
[ap + 0] = [fp + -7] + 19, ap++;
[ap + 0] = [[fp + -4] + 53], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [fp + -4] + 56, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 21;
[ap + 0] = [fp + -7] + 16, ap++;
[ap + 0] = [[fp + -4] + 53], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [fp + -4] + 57, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 55], ap++;
[ap + 0] = [[fp + -4] + 56], ap++;
ret;
ap += 26;
[ap + 0] = [fp + -7] + 16, ap++;
[ap + 0] = [[fp + -4] + 47], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [fp + -4] + 51, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 49], ap++;
[ap + 0] = [[fp + -4] + 50], ap++;
ret;
ap += 39;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -4] + 40], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [fp + -4] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 42], ap++;
[ap + 0] = [[fp + -4] + 43], ap++;
ret;
ap += 44;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -4] + 33], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [fp + -4] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 35], ap++;
[ap + 0] = [[fp + -4] + 36], ap++;
ret;
ap += 51;
call rel 6978;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = [[fp + -4] + 25], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 28, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 46;
call rel 6937;
[ap + 0] = [fp + -7] + 11, ap++;
[ap + 0] = [[fp + -4] + 25], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 28, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 62;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -4] + 25], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 29, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 27], ap++;
[ap + 0] = [[fp + -4] + 28], ap++;
ret;
ap += 65;
call rel 6907;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -4] + 18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 81;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [[fp + -4] + 18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 20], ap++;
[ap + 0] = [[fp + -4] + 21], ap++;
ret;
ap += 73;
call rel 6879;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 14, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 89;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
ret;
ap += 99;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1153431758152617002674809172345379817267606445825896141478041208762844152223, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 725 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 124;
call rel 6818;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -137], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -5] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 673 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 710045654234148520171187225065630606488213002833401497650569757716452749872, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 12];
[ap + -4] = [[fp + -6] + 13];
[ap + -3] = [[fp + -6] + 14];
[ap + -2] = [[fp + -6] + 15];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 12) %}
[ap + 0] = [[fp + -6] + 17], ap++;
jmp rel 647 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 18], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -9] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -9] + 1], ap++;
[ap + -5] = [[fp + -9] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 615 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -9] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + -1] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 2];
jmp rel 18;
[ap + -1] = [[fp + -9] + 2];
ap += 109;
call rel 6768;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 19, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 178655824489502327769759410780782113083476808520271356765681597503482464105, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 3], ap++;
[ap + -4] = [[fp + -9] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 4], ap++;
[ap + -7] = [[fp + -9] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -6] + 16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 19];
[ap + -3] = [[fp + -6] + 20];
[ap + -2] = [[fp + -6] + 21];
[ap + -4] = [[fp + -6] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 19) %}
[ap + 0] = [[fp + -6] + 24], ap++;
jmp rel 522 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 25], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -9] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -9] + 7], ap++;
[ap + -5] = [[fp + -9] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 489 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -9] + 6];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -9] + 7];
jmp rel 18 if [ap + -3] != 0;
ap += 92;
call rel 6687;
[ap + 0] = [fp + -9] + 8, ap++;
[ap + 0] = [[fp + -6] + 23], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6] + 26, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -9] + 8, ap++;
[ap + 0] = [[fp + -6] + 23], ap++;
[ap + 0] = [fp + -6] + 26, ap++;
[ap + 0] = 900542180392366454148948293090091998379728277675000416022170242083806241045, ap++;
call rel 6671;
jmp rel 442 if [ap + -3] != 0;
[fp + -4] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
ap += 43;
call rel 7360;
[ap + 0] = [ap + -1] + 7359, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 59310, ap++;
[ap + 0] = [ap + -55] + [ap + -1], ap++;
jmp rel 18;
[fp + -3] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
ap += 42;
call rel 7342;
[ap + 0] = [ap + -1] + 7341, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 59120, ap++;
[ap + 0] = [ap + -55] + [ap + -1], ap++;
call rel 6770;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 725830221483990777176774397100391313622024035615321701228361226644626740815, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -10] = [[ap + -9] + 1];
[ap + -3] = [[ap + -9] + 2];
[ap + -2] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 370 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 6], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -17] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -19] + 1], ap++;
[ap + -5] = [[ap + -20] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 337 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -15] + 1];
[ap + 0] = [ap + -3] * 65536, ap++;
[ap + 0] = 240674840150100245343259713824179624551841216416497769188531853723120415523, ap++;
[ap + 0] = [ap + -2] + [ap + -55], ap++;
[ap + -2] = [[fp + -7] + 3];
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -23] + 2], ap++;
[ap + -4] = [[ap + -24] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -26] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -23] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -25] + 3], ap++;
[ap + -7] = [[ap + -26] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -28] + 7];
[ap + -4] = [[ap + -28] + 8];
[ap + -3] = [[ap + -28] + 9];
[ap + -5] = [[ap + -28] + 10];
[ap + -2] = [[ap + -28] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28] + 7) %}
[ap + 0] = [[ap + -28] + 13], ap++;
jmp rel 265 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1374587892678323227195797658091058581998481474457735682590195586262759633693, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -33] + 14];
[ap + -4] = [[ap + -33] + 15];
[ap + -3] = [[ap + -33] + 16];
[ap + -2] = [[ap + -33] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 14) %}
[ap + 0] = [[ap + -33] + 19], ap++;
jmp rel 237 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 20], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -41] + 5], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -43] + 6], ap++;
[ap + -5] = [[ap + -44] + 7];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 204 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -38] + 5];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -39] + 6];
[ap + 0] = [[ap + -37] + 18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 725830221483990777176774397100391313622024035615321701228361226644626740815, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -41] + 21];
[ap + -4] = [[ap + -41] + 22];
[ap + -3] = [[ap + -41] + 23];
[ap + -2] = [[ap + -41] + 24];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -41] + 21) %}
[ap + 0] = [[ap + -41] + 26], ap++;
jmp rel 170 if [ap + -1] != 0;
[ap + 0] = [[ap + -42] + 27], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -49] + 7], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -51] + 8], ap++;
[ap + -5] = [[ap + -52] + 9];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 137 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -46] + 7];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -47] + 8];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel [ap + -6];
jmp rel 59;
jmp rel 39;
jmp rel 21;
[ap + 0] = [[ap + -53] + 25], ap++;
[ap + 0] = 553946278156203491522487009125944156509105080517783764306022585230501188954, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
jmp rel 53;
[ap + 0] = [[ap + -53] + 25], ap++;
[ap + 0] = 1659622917305625390749334795371986947600403449938397185716138391485174031757, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -9] + 0];
[ap + -3] = [[ap + -9] + 1];
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 2, ap++;
jmp rel 37;
[ap + 0] = [[ap + -53] + 25], ap++;
[ap + 0] = 880061577066792731595429565469645176813718464796772741938032589769663479688, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
jmp rel 19;
[ap + 0] = [[ap + -53] + 25], ap++;
[ap + 0] = 1355523531718876977779483585399229452393057587437361147276783574556348248496, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -61] + 28];
[ap + -6] = [[ap + -61] + 29];
[ap + -5] = [[ap + -61] + 30];
[ap + -4] = [[ap + -61] + 31];
[ap + -3] = [[ap + -61] + 32];
[ap + -2] = [[ap + -61] + 33];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -61] + 28) %}
[ap + 0] = [[ap + -61] + 35], ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [[ap + -62] + 34], ap++;
[ap + 0] = [ap + -65] + 9, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -66] + 36, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [ap + -65] + 9, ap++;
[ap + 0] = [[ap + -64] + 34], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -66] + 38, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -68] + 36], ap++;
[ap + 0] = [[ap + -69] + 37], ap++;
ret;
ap += 5;
call rel 6283;
[ap + 0] = [ap + -65] + 10, ap++;
[ap + 0] = [[ap + -64] + 25], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -66] + 28, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 21;
[ap + 0] = [ap + -65] + 7, ap++;
[ap + 0] = [[ap + -64] + 25], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -66] + 29, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -68] + 27], ap++;
[ap + 0] = [[ap + -69] + 28], ap++;
ret;
ap += 13;
call rel 6253;
[ap + 0] = [ap + -65] + 8, ap++;
[ap + 0] = [[ap + -64] + 18], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -66] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 29;
[ap + 0] = [ap + -65] + 5, ap++;
[ap + 0] = [[ap + -64] + 18], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -66] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -68] + 20], ap++;
[ap + 0] = [[ap + -69] + 21], ap++;
ret;
ap += 34;
[ap + 0] = [ap + -65] + 5, ap++;
[ap + 0] = [[ap + -64] + 12], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -66] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -68] + 14], ap++;
[ap + 0] = [[ap + -69] + 15], ap++;
ret;
ap += 37;
call rel 6209;
[ap + 0] = [ap + -65] + 3, ap++;
[ap + 0] = [[ap + -64] + 4], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -66] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 53;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [[ap + -64] + 4], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -66] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -68] + 6], ap++;
[ap + 0] = [[ap + -69] + 7], ap++;
ret;
ap += 59;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -66], ap++;
ret;
ap += 87;
call rel 6173;
[ap + 0] = [fp + -9] + 9, ap++;
[ap + 0] = [[fp + -6] + 23], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6] + 26, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 103;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [[fp + -6] + 23], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 25], ap++;
[ap + 0] = [[fp + -6] + 26], ap++;
ret;
ap += 109;
call rel 6138;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 19, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 125;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 20, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 18], ap++;
[ap + 0] = [[fp + -6] + 19], ap++;
ret;
ap += 130;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
ret;
ap += 138;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 1153431758152617002674809172345379817267606445825896141478041208762844152223, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 1261 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 6], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 14 if [ap + -1] != 0;
call rel 6070;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 7];
[ap + -5] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 7) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 1213 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 710045654234148520171187225065630606488213002833401497650569757716452749872, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 12];
[ap + -4] = [[fp + -3] + 13];
[ap + -3] = [[fp + -3] + 14];
[ap + -2] = [[fp + -3] + 15];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 12) %}
[ap + 0] = [[fp + -3] + 17], ap++;
jmp rel 1189 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 18], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1159 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -6] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[fp + 0] = [[ap + -1] + 1];
[fp + 0] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 2];
jmp rel 1129;
[ap + -1] = [[fp + -6] + 2];
[ap + 0] = [[fp + -3] + 16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1603808399645893077226999146436512301390740438349822149456821856936905775949, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 19];
[ap + -4] = [[fp + -3] + 20];
[ap + -3] = [[fp + -3] + 21];
[ap + -2] = [[fp + -3] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 19) %}
[ap + 0] = [[fp + -3] + 24], ap++;
jmp rel 1103 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 25], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 3], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -6] + 4], ap++;
[ap + -5] = [[fp + -6] + 5];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1073 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -6] + 3];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -6] + 4];
[ap + 0] = [[fp + -3] + 23], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1356903408909024234806913891847579588644392148723634888669658667113490323602, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 26];
[ap + -4] = [[fp + -3] + 27];
[ap + -3] = [[fp + -3] + 28];
[ap + -2] = [[fp + -3] + 29];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 26) %}
[ap + 0] = [[fp + -3] + 31], ap++;
jmp rel 1042 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 32], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -6] + 6], ap++;
[ap + -5] = [[fp + -6] + 7];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1012 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -6] + 5];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -6] + 6];
[ap + -11] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
call rel 6095;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [[fp + -3] + 30], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 33, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [[fp + -3] + 30], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 33, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
call rel 6076;
jmp rel 964 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 900542180392366454148948293090091998379728277675000416022170242083806241045, ap++;
call rel 5920;
jmp rel 946 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 0, ap++;
call rel 6308;
jmp rel 925 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 459088842393652775078779672892360605058768068423935561374767379127816985755, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -90] + 0];
[ap + -91] = [[ap + -90] + 1];
[ap + -3] = [[ap + -90] + 2];
[ap + -2] = [[ap + -90] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -90]) %}
[ap + 0] = [[ap + -90] + 5], ap++;
jmp rel 902 if [ap + -1] != 0;
[ap + 0] = [[ap + -91] + 6], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -15] + 1], ap++;
[ap + -5] = [[ap + -16] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 872 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -11] + 1];
jmp rel 8 if [ap + -3] != 0;
[ap + 0] = [[ap + -94] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [[ap + -94] + 4], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1635809615704332091889448403429097910573595942270939993383771697683339498350, ap++;
[ap + -1] = [[ap + -140] + 0];
[ap + -2] = [[ap + -140] + 1];
[ap + 0] = [[ap + -140] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 2], ap++;
[ap + -4] = [[ap + -21] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -23] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -22] + 3], ap++;
[ap + -7] = [[ap + -23] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -108] + 7];
[ap + -13] = [[ap + -108] + 8];
[ap + -2] = [[ap + -108] + 9];
[ap + -3] = [[ap + -108] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -108] + 7) %}
[ap + 0] = [[ap + -108] + 12], ap++;
jmp rel 797 if [ap + -1] != 0;
[ap + 0] = [[ap + -109] + 13], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -31] + 5], ap++;
[ap + -4] = [[ap + -32] + 6], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -33] + 7];
jmp rel 768;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -30] + 5], ap++;
[ap + -3] = [[ap + -31] + 6], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -32] + 7];
[ap + 0] = [[ap + -115] + 11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1374587892678323227195797658091058581998481474457735682590195586262759633693, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -119] + 14];
[ap + -4] = [[ap + -119] + 15];
[ap + -3] = [[ap + -119] + 16];
[ap + -2] = [[ap + -119] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -119] + 14) %}
[ap + 0] = [[ap + -119] + 19], ap++;
jmp rel 734 if [ap + -1] != 0;
[ap + 0] = [[ap + -120] + 20], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -42] + 8], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -44] + 9], ap++;
[ap + -5] = [[ap + -45] + 10];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 703 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -39] + 8];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -40] + 9];
[ap + 0] = [[ap + -123] + 18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 725830221483990777176774397100391313622024035615321701228361226644626740815, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -127] + 21];
[ap + -4] = [[ap + -127] + 22];
[ap + -3] = [[ap + -127] + 23];
[ap + -2] = [[ap + -127] + 24];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -127] + 21) %}
[ap + 0] = [[ap + -127] + 26], ap++;
jmp rel 671 if [ap + -1] != 0;
[ap + 0] = [[ap + -128] + 27], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -50] + 10], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -52] + 11], ap++;
[ap + -5] = [[ap + -53] + 12];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 640 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -47] + 10];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -48] + 11];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel [ap + -6];
jmp rel 59;
jmp rel 39;
jmp rel 21;
[ap + 0] = [[ap + -139] + 25], ap++;
[ap + 0] = 553946278156203491522487009125944156509105080517783764306022585230501188954, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
jmp rel 53;
[ap + 0] = [[ap + -139] + 25], ap++;
[ap + 0] = 1659622917305625390749334795371986947600403449938397185716138391485174031757, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -9] + 0];
[ap + -3] = [[ap + -9] + 1];
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 2, ap++;
jmp rel 37;
[ap + 0] = [[ap + -139] + 25], ap++;
[ap + 0] = 880061577066792731595429565469645176813718464796772741938032589769663479688, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
jmp rel 19;
[ap + 0] = [[ap + -139] + 25], ap++;
[ap + 0] = 1355523531718876977779483585399229452393057587437361147276783574556348248496, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13] + 5, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -147] + 28];
[ap + -6] = [[ap + -147] + 29];
[ap + -5] = [[ap + -147] + 30];
[ap + -4] = [[ap + -147] + 31];
[ap + -3] = [[ap + -147] + 32];
[ap + -2] = [[ap + -147] + 33];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -147] + 28) %}
[ap + 0] = [[ap + -147] + 35], ap++;
jmp rel 523 if [ap + -1] != 0;
[ap + 0] = [[ap + -148] + 34], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 459088842393652775078779672892360605058768068423935561374767379127816985755, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -152] + 36];
[ap + -4] = [[ap + -152] + 37];
[ap + -3] = [[ap + -152] + 38];
[ap + -2] = [[ap + -152] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -152] + 36) %}
[ap + 0] = [[ap + -152] + 41], ap++;
jmp rel 497 if [ap + -1] != 0;
[ap + 0] = [[ap + -153] + 42], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -75] + 12], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -77] + 13], ap++;
[ap + -5] = [[ap + -78] + 14];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 466 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -72] + 12];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -73] + 13];
[ap + 0] = [[ap + -156] + 40], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1356903408909024234806913891847579588644392148723634888669658667113490323602, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -160] + 43];
[ap + -4] = [[ap + -160] + 44];
[ap + -3] = [[ap + -160] + 45];
[ap + -2] = [[ap + -160] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -160] + 43) %}
[ap + 0] = [[ap + -160] + 48], ap++;
jmp rel 434 if [ap + -1] != 0;
[ap + 0] = [[ap + -161] + 49], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -83] + 14], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -85] + 15], ap++;
[ap + -5] = [[ap + -86] + 16];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 403 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -80] + 14];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -81] + 15];
jmp rel 16 if [ap + -3] != 0;
call rel 6149;
[ap + 0] = [ap + -89] + 16, ap++;
[ap + 0] = [[ap + -173] + 47], ap++;
[ap + 0] = [ap + -216] + 3, ap++;
[ap + 0] = [ap + -175] + 50, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -11], memory[ap + -3]) %}
[ap + 4] = [[ap + -81] + 16], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -5] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -84] + 17], ap++;
[ap + -1] = [[ap + -85] + 18], ap++;
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -16] = [ap + -3] + [ap + -1];
jmp rel 15 if [ap + -1] != 0;
ap += 9;
[ap + 0] = [[ap + -178] + 47], ap++;
[ap + 0] = [ap + -96] + 19, ap++;
[ap + 0] = [ap + -2] + 11550, ap++;
[ap + 0] = [ap + -181] + 50, ap++;
[ap + 0] = 1, ap++;
jmp rel 65;
[ap + 0] = [[ap + -169] + 47], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 459088842393652775078779672892360605058768068423935561374767379127816985755, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -173] + 50];
[ap + -4] = [[ap + -173] + 51];
[ap + -3] = [[ap + -173] + 52];
[ap + -2] = [[ap + -173] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -173] + 50) %}
[ap + 0] = [[ap + -173] + 55], ap++;
jmp rel 332 if [ap + -1] != 0;
[ap + 0] = [[ap + -174] + 56], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -96] + 19], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -98] + 20], ap++;
[ap + -5] = [[ap + -99] + 21];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 301 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -93] + 19];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -94] + 20];
[ap + -3] = [ap + 0] + 65535, ap++;
jmp rel 16 if [ap + -1] != 0;
call rel 5443;
[ap + 0] = [ap + -103] + 21, ap++;
[ap + 0] = [[ap + -187] + 54], ap++;
[ap + 0] = [ap + -230] + 3, ap++;
[ap + 0] = [ap + -189] + 57, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[ap + -178] + 54], ap++;
[ap + 0] = [ap + -96] + 21, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -181] + 57, ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 459088842393652775078779672892360605058768068423935561374767379127816985755, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + -6] = [[ap + -5] + 1];
[ap + -3] = [[ap + -5] + 2];
[ap + -2] = [[ap + -5] + 3];
[ap + -4] = [[ap + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -5]) %}
[ap + 0] = [[ap + -5] + 6], ap++;
jmp rel 244 if [ap + -1] != 0;
[ap + 0] = [[ap + -6] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 725830221483990777176774397100391313622024035615321701228361226644626740815, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 7];
[ap + -4] = [[ap + -10] + 8];
[ap + -3] = [[ap + -10] + 9];
[ap + -2] = [[ap + -10] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10] + 7) %}
[ap + 0] = [[ap + -10] + 12], ap++;
jmp rel 219 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 13], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -18] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -20] + 1], ap++;
[ap + -5] = [[ap + -21] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 188 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -15] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -16] + 1];
[ap + -3] = [ap + 0] + 18446744073709551615, ap++;
jmp rel 13 if [ap + -1] != 0;
ap += 17;
[ap + 0] = [[ap + -32] + 11], ap++;
[ap + 0] = [ap + -35] + 2, ap++;
[ap + 0] = [ap + -2] + 32840, ap++;
[ap + 0] = [ap + -35] + 14, ap++;
jmp rel 117;
[ap + 0] = [[ap + -15] + 11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 725830221483990777176774397100391313622024035615321701228361226644626740815, ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -20] + 14];
[ap + -5] = [[ap + -20] + 15];
[ap + -4] = [[ap + -20] + 16];
[ap + -3] = [[ap + -20] + 17];
[ap + -2] = [[ap + -20] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20] + 14) %}
[ap + 0] = [[ap + -20] + 20], ap++;
jmp rel 138 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 314295661781227121108470737228459134249686658980985317236390866122496298342, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -25] + 21];
[ap + -4] = [[ap + -25] + 22];
[ap + -3] = [[ap + -25] + 23];
[ap + -2] = [[ap + -25] + 24];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25] + 21) %}
[ap + 0] = [[ap + -25] + 26], ap++;
jmp rel 112 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 27], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -33] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -35] + 3], ap++;
[ap + -5] = [[ap + -36] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 81 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -30] + 2];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -31] + 3];
%{ memory[ap + 0] = (memory[fp + 0] + memory[ap + -3]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + 0] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -34] + 4];
jmp rel 48;
[ap + 1] = [fp + 0] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -34] + 4];
[ap + 0] = [[ap + -32] + 25], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 710045654234148520171187225065630606488213002833401497650569757716452749872, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 28];
[ap + -4] = [[ap + -36] + 29];
[ap + -3] = [[ap + -36] + 30];
[ap + -2] = [[ap + -36] + 31];
[ap + -5] = [[ap + -36] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36] + 28) %}
[ap + 0] = [[ap + -36] + 34], ap++;
jmp rel 17 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 33], ap++;
[ap + 0] = [ap + -40] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -263] + 3, ap++;
[ap + 0] = [ap + -41] + 35, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -39] + 5, ap++;
[ap + 0] = [[ap + -38] + 33], ap++;
[ap + 0] = [ap + -262] + 3, ap++;
[ap + 0] = [ap + -40] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 35], ap++;
[ap + 0] = [[ap + -43] + 36], ap++;
ret;
[ap + 0] = [[ap + -32] + 25], ap++;
[ap + 0] = [ap + -35] + 5, ap++;
[ap + 0] = [ap + -2] + 9800, ap++;
[ap + 0] = [ap + -35] + 28, ap++;
call rel 5073;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -269] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5203;
[ap + 0] = [ap + -44] + 5, ap++;
[ap + 0] = [[ap + -43] + 25], ap++;
[ap + 0] = [ap + -267] + 3, ap++;
[ap + 0] = [ap + -45] + 28, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -28] + 2, ap++;
[ap + 0] = [[ap + -27] + 25], ap++;
[ap + 0] = [ap + -251] + 3, ap++;
[ap + 0] = [ap + -29] + 29, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -31] + 27], ap++;
[ap + 0] = [[ap + -32] + 28], ap++;
ret;
[ap + 0] = [ap + -23] + 2, ap++;
[ap + 0] = [[ap + -22] + 19], ap++;
[ap + 0] = [ap + -246] + 3, ap++;
[ap + 0] = [ap + -24] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -26] + 21], ap++;
[ap + 0] = [[ap + -27] + 22], ap++;
ret;
call rel 5165;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [[ap + -28] + 11], ap++;
[ap + 0] = [ap + -252] + 3, ap++;
[ap + 0] = [ap + -30] + 14, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [[ap + -12] + 11], ap++;
[ap + 0] = [ap + -236] + 3, ap++;
[ap + 0] = [ap + -14] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 13], ap++;
[ap + 0] = [[ap + -17] + 14], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [[ap + -7] + 5], ap++;
[ap + 0] = [ap + -231] + 3, ap++;
[ap + 0] = [ap + -9] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -11] + 7], ap++;
[ap + 0] = [[ap + -12] + 8], ap++;
ret;
call rel 5134;
[ap + 0] = [ap + -107] + 22, ap++;
[ap + 0] = [[ap + -191] + 54], ap++;
[ap + 0] = [ap + -234] + 3, ap++;
[ap + 0] = [ap + -193] + 57, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -91] + 19, ap++;
[ap + 0] = [[ap + -175] + 54], ap++;
[ap + 0] = [ap + -218] + 3, ap++;
[ap + 0] = [ap + -177] + 58, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -179] + 56], ap++;
[ap + 0] = [[ap + -180] + 57], ap++;
ret;
call rel 5108;
[ap + 0] = [ap + -94] + 17, ap++;
[ap + 0] = [[ap + -178] + 47], ap++;
[ap + 0] = [ap + -221] + 3, ap++;
[ap + 0] = [ap + -180] + 50, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -78] + 14, ap++;
[ap + 0] = [[ap + -162] + 47], ap++;
[ap + 0] = [ap + -205] + 3, ap++;
[ap + 0] = [ap + -164] + 51, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -166] + 49], ap++;
[ap + 0] = [[ap + -167] + 50], ap++;
ret;
call rel 5082;
[ap + 0] = [ap + -86] + 15, ap++;
[ap + 0] = [[ap + -170] + 40], ap++;
[ap + 0] = [ap + -213] + 3, ap++;
[ap + 0] = [ap + -172] + 43, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -70] + 12, ap++;
[ap + 0] = [[ap + -154] + 40], ap++;
[ap + 0] = [ap + -197] + 3, ap++;
[ap + 0] = [ap + -156] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -158] + 42], ap++;
[ap + 0] = [[ap + -159] + 43], ap++;
ret;
[ap + 0] = [ap + -65] + 12, ap++;
[ap + 0] = [[ap + -149] + 34], ap++;
[ap + 0] = [ap + -192] + 3, ap++;
[ap + 0] = [ap + -151] + 38, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -153] + 36], ap++;
[ap + 0] = [[ap + -154] + 37], ap++;
ret;
call rel 5039;
[ap + 0] = [ap + -61] + 13, ap++;
[ap + 0] = [[ap + -145] + 25], ap++;
[ap + 0] = [ap + -188] + 3, ap++;
[ap + 0] = [ap + -147] + 28, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -45] + 10, ap++;
[ap + 0] = [[ap + -129] + 25], ap++;
[ap + 0] = [ap + -172] + 3, ap++;
[ap + 0] = [ap + -131] + 29, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -133] + 27], ap++;
[ap + 0] = [[ap + -134] + 28], ap++;
ret;
call rel 5013;
[ap + 0] = [ap + -53] + 11, ap++;
[ap + 0] = [[ap + -137] + 18], ap++;
[ap + 0] = [ap + -180] + 3, ap++;
[ap + 0] = [ap + -139] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -37] + 8, ap++;
[ap + 0] = [[ap + -121] + 18], ap++;
[ap + 0] = [ap + -164] + 3, ap++;
[ap + 0] = [ap + -123] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -125] + 20], ap++;
[ap + 0] = [[ap + -126] + 21], ap++;
ret;
call rel 4997;
[ap + 0] = [ap + -41] + 8, ap++;
[ap + 0] = [[ap + -125] + 11], ap++;
[ap + 0] = [ap + -168] + 3, ap++;
[ap + 0] = [ap + -127] + 14, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -26] + 5, ap++;
[ap + 0] = [[ap + -110] + 11], ap++;
[ap + 0] = [ap + -153] + 3, ap++;
[ap + 0] = [ap + -112] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -114] + 13], ap++;
[ap + 0] = [[ap + -115] + 14], ap++;
ret;
call rel 4966;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [[ap + -108] + 4], ap++;
[ap + 0] = [ap + -151], ap++;
[ap + 0] = [ap + -110] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [[ap + -92] + 4], ap++;
[ap + 0] = [ap + -135], ap++;
[ap + 0] = [ap + -94] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -96] + 6], ap++;
[ap + 0] = [[ap + -97] + 7], ap++;
ret;
call rel 5596;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4914;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -3] + 30], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 33, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = [[fp + -3] + 30], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 34, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 32], ap++;
[ap + 0] = [[fp + -3] + 33], ap++;
ret;
call rel 4890;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -3] + 23], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 26, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [[fp + -3] + 23], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 25], ap++;
[ap + 0] = [[fp + -3] + 26], ap++;
ret;
call rel 5524;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [[fp + -3] + 16], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 19, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4848;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [[fp + -3] + 16], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 19, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -3] + 16], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 20, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 18], ap++;
[ap + 0] = [[fp + -3] + 19], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 11330 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768200126, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 577;
[fp + -6] = [ap + 0] + 11330, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 555;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -7] + 2], ap++;
[ap + -5] = [[fp + -7] + 3];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 532 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 1];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 2];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 504;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 3], ap++;
[ap + -4] = [[fp + -7] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 5];
jmp rel 483;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 3], ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 5];
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 453;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 6], ap++;
[ap + -4] = [[fp + -7] + 7], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 8];
jmp rel 432;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 6], ap++;
[ap + -3] = [[fp + -7] + 7], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 8];
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 402;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 9], ap++;
[ap + 3] = [[fp + -7] + 10], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 11];
jmp rel 375 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 9];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 358;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 10], ap++;
[ap + 3] = [[fp + -7] + 11], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 12];
jmp rel 331 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 10];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 306;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 11], ap++;
[ap + 3] = [[fp + -7] + 12], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 13];
jmp rel 279 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 11];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 262;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 12], ap++;
[ap + 3] = [[fp + -7] + 13], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 14];
jmp rel 235 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 12];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 210;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 13], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -7] + 14], ap++;
[ap + -5] = [[fp + -7] + 15];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 187 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 13];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -7] + 14];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 159;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 15], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -7] + 16], ap++;
[ap + -5] = [[fp + -7] + 17];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 136 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 15];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -7] + 16];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 108;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 17], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -7] + 18], ap++;
[ap + -5] = [[fp + -7] + 19];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 85 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 17];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 18];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 5143;
[ap + 0] = [fp + -7] + 19, ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5209;
[ap + 0] = [ap + -1] + 5208, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 192680 <= memory[ap + -68] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -69] = [ap + 0] + 192680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 19];
jmp rel 41;
[ap + -69] = [ap + 0] + 192680, ap++;
[ap + -1] = [[fp + -7] + 19];
[ap + 0] = [fp + -7] + 20, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -4423;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 20, ap++;
[ap + 0] = [ap + -72], ap++;
jmp rel 189;
[ap + 0] = [fp + -7] + 20, ap++;
[ap + 0] = [ap + -67] + 800, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 17, ap++;
[ap + 0] = [ap + -59] + 2110, ap++;
call rel 5069;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 18, ap++;
[ap + 0] = [ap + -61] + 1840, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 15, ap++;
[ap + 0] = [ap + -53] + 3150, ap++;
call rel 5054;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 16, ap++;
[ap + 0] = [ap + -55] + 2880, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [ap + -47] + 4190, ap++;
call rel 5039;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 15, ap++;
[ap + 0] = [ap + -49] + 3550, ap++;
jmp rel 18;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -42] + 4860, ap++;
jmp rel 12;
[ap + 0] = [fp + -7] + 14, ap++;
[ap + 0] = [ap + -44] + 4320, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 11, ap++;
[ap + 0] = [ap + -37] + 5730, ap++;
call rel 5012;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [ap + -39] + 5090, ap++;
jmp rel 18;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = [ap + -32] + 6400, ap++;
jmp rel 12;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -34] + 5860, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 9, ap++;
[ap + 0] = [ap + -27] + 7270, ap++;
call rel 4985;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 9, ap++;
[ap + 0] = [ap + -25] + 7470, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -18] + 8680, ap++;
call rel 4970;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -16] + 8880, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -9] + 10090, ap++;
call rel 4955;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -11] + 9820, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 11130, ap++;
call rel 4940;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 4932;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768210186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 92;
[fp + -6] = [ap + 0] + 1270, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 4862;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4928;
[ap + 0] = [ap + -1] + 4927, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 137070 <= memory[ap + -6] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -7] = [ap + 0] + 137070, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 1];
jmp rel 54;
[ap + -7] = [ap + 0] + 137070, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -4119;
jmp rel 35 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -12] = [[ap + -1] + 0];
[ap + -11] = [[ap + -1] + 1];
[ap + -10] = [[ap + -1] + 2];
[ap + -9] = [[ap + -1] + 3];
[ap + -8] = [[ap + -1] + 4];
[ap + -7] = [[ap + -1] + 5];
[ap + -6] = [[ap + -1] + 6];
[ap + -5] = [[ap + -1] + 7];
[ap + -4] = [[ap + -1] + 8];
[ap + -3] = [[ap + -1] + 9];
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -15] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 10];
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 11, ap++;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 5;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 4822;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 2980 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208476, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 129;
[fp + -6] = [ap + 0] + 2980, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 106;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 85;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 4721;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4786;
[ap + 0] = [ap + -1] + 4785, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 110670, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -18] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -19] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 34;
[ap + -19] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -3521;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -22], ap++;
jmp rel 26;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 1570, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 2780, ap++;
call rel 4684;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 4675;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4520 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206936, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 228;
[fp + -6] = [ap + 0] + 4520, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 205;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 184;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 153;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 4], ap++;
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 6];
jmp rel 126 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 4];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 109;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + 3] = [[fp + -7] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 7];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 4509;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4574;
[ap + 0] = [ap + -1] + 4573, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 136480, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -28] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -29] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 6];
jmp rel 36;
[ap + -29] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 6];
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3036;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -32], ap++;
jmp rel 59;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -24] + 730, ap++;
jmp rel 18;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -17] + 2040, ap++;
jmp rel 12;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -19] + 1500, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -12] + 2910, ap++;
call rel 4453;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 3110, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 4320, ap++;
call rel 4437;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 4428;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 74;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 4357;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4422;
[ap + 0] = [ap + -1] + 4421, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 258540, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -8] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -9] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 1];
jmp rel 33;
[ap + -9] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -2435;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 5;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 4335;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
[fp + -4] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 99 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 324082507557026607559297973963499356186966181238423744327870819818732525919, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[fp + -3] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 74 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = 1695359504209480298892060746767480882564202943436149333209570066538338560187, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -6] + 0];
[ap + -3] = [[ap + -6] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 2, ap++;
jmp rel 16;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = 3374849925184715038152467255158279495170890941906082121950500046858126116, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -6] + 0];
[ap + -3] = [[ap + -6] + 1];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -5] + 14];
[ap + -6] = [[fp + -5] + 15];
[ap + -5] = [[fp + -5] + 16];
[ap + -4] = [[fp + -5] + 17];
[ap + -3] = [[fp + -5] + 18];
[ap + -2] = [[fp + -5] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 14) %}
[ap + 0] = [[fp + -5] + 21], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [ap + -1] + 10, ap++;
[ap + 0] = [fp + -5] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [fp + -5] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 22], ap++;
[ap + 0] = [[fp + -5] + 23], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
ret;
ap += 20;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
[ap + 0] = 1418015208620934002485891016388288854760686469483472442557500962310253267398, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 3], ap++;
[ap + -4] = [[fp + -7] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 5];
jmp rel 27;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 3], ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 5];
ap += 8;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -2] + 820, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 3415;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 15;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 223925651276572801467025322450506123433664924558092583619131301620304795732, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -13] = [[fp + -11] + 1];
[ap + -3] = [[fp + -11] + 2];
[ap + -2] = [[fp + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 5], ap++;
jmp rel 332 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 6], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -14] + 1], ap++;
[ap + -5] = [[fp + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 300 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -14] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -14] + 1];
[ap + -3] = [ap + 0] + 18446744073709551615, ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 40;
call rel 3193;
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 223925651276572801467025322450506123433664924558092583619131301620304795732, ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -11] + 7];
[ap + -5] = [[fp + -11] + 8];
[ap + -4] = [[fp + -11] + 9];
[ap + -3] = [[fp + -11] + 10];
[ap + -2] = [[fp + -11] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 7) %}
[ap + 0] = [[fp + -11] + 13], ap++;
jmp rel 245 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 223925651276572801467025322450506123433664924558092583619131301620304795732, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -11] + 14];
[ap + -4] = [[fp + -11] + 15];
[ap + -3] = [[fp + -11] + 16];
[ap + -2] = [[fp + -11] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 14) %}
[ap + 0] = [[fp + -11] + 19], ap++;
jmp rel 218 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 20], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -14] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -14] + 3], ap++;
[ap + -5] = [[fp + -14] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 186 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -14] + 2];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -14] + 3];
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -14] + 4], ap++;
[ap + -4] = [[fp + -14] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -14] + 6];
jmp rel 149;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -14] + 4], ap++;
[ap + -3] = [[fp + -14] + 5], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -14] + 6];
[ap + 0] = 1418015208620934002485891016388288854760686469483472442557500962310253267398, ap++;
[ap + -1] = [[fp + -12] + 0];
[ap + -10] = [[fp + -12] + 1];
[ap + 0] = [[fp + -12] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -14] + 7], ap++;
[ap + -4] = [[fp + -14] + 8], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -14] + 9];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -14] + 7], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -14] + 8], ap++;
[ap + -7] = [[fp + -14] + 9];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -11] + 18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -11] + 21];
[ap + -3] = [[fp + -11] + 22];
[ap + -2] = [[fp + -11] + 23];
[ap + -4] = [[fp + -11] + 24];
[ap + -18] = [[fp + -11] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 21) %}
[ap + 0] = [[fp + -11] + 27], ap++;
jmp rel 80 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -23], ap++;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [[fp + -11] + 26], ap++;
[ap + 0] = 1695359504209480298892060746767480882564202943436149333209570066538338560187, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -6] + 0];
[ap + -3] = [[ap + -6] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 2, ap++;
jmp rel 16;
[ap + 0] = [[fp + -11] + 26], ap++;
[ap + 0] = 3374849925184715038152467255158279495170890941906082121950500046858126116, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -6] + 0];
[ap + -3] = [[ap + -6] + 1];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -11] + 28];
[ap + -6] = [[fp + -11] + 29];
[ap + -5] = [[fp + -11] + 30];
[ap + -4] = [[fp + -11] + 31];
[ap + -3] = [[fp + -11] + 32];
[ap + -2] = [[fp + -11] + 33];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 28) %}
[ap + 0] = [[fp + -11] + 35], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 34], ap++;
[ap + 0] = [fp + -14] + 10, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [fp + -11] + 36, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -40], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -14] + 10, ap++;
[ap + 0] = [[fp + -11] + 34], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [fp + -11] + 38, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 36], ap++;
[ap + 0] = [[fp + -11] + 37], ap++;
ret;
ap += 15;
[ap + 0] = [fp + -14] + 10, ap++;
[ap + 0] = [[fp + -11] + 26], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [fp + -11] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 28], ap++;
[ap + 0] = [[fp + -11] + 29], ap++;
ret;
ap += 19;
call rel 3821;
[ap + 0] = [fp + -14] + 7, ap++;
[ap + 0] = [[fp + -11] + 18], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 21;
call rel 3088;
[ap + 0] = [fp + -14] + 5, ap++;
[ap + 0] = [[fp + -11] + 18], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 37;
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = [[fp + -11] + 18], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 20], ap++;
[ap + 0] = [[fp + -11] + 21], ap++;
ret;
ap += 42;
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = [[fp + -11] + 12], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 14], ap++;
[ap + 0] = [[fp + -11] + 15], ap++;
ret;
ap += 36;
call rel 3047;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 52;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [[fp + -11] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 4090 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207366, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 267;
[fp + -6] = [ap + 0] + 4090, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 245;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 224;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 194;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 4], ap++;
[ap + -4] = [[fp + -7] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 6];
jmp rel 173;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 6];
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 3612;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3678;
[ap + 0] = [ap + -1] + 3677, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 33500 <= memory[ap + -24] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -25] = [ap + 0] + 33500, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 7];
jmp rel 127;
[ap + -25] = [ap + 0] + 33500, ap++;
[ap + -1] = [[fp + -7] + 7];
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -4] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
[ap + -27] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 100 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 324082507557026607559297973963499356186966181238423744327870819818732525919, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[ap + -23] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 75 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -28], ap++;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = 1695359504209480298892060746767480882564202943436149333209570066538338560187, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -6] + 0];
[ap + -3] = [[ap + -6] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 2, ap++;
jmp rel 16;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = 3374849925184715038152467255158279495170890941906082121950500046858126116, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -6] + 0];
[ap + -3] = [[ap + -6] + 1];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -5] + 14];
[ap + -6] = [[fp + -5] + 15];
[ap + -5] = [[fp + -5] + 16];
[ap + -4] = [[fp + -5] + 17];
[ap + -3] = [[fp + -5] + 18];
[ap + -2] = [[fp + -5] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 14) %}
[ap + 0] = [[fp + -5] + 21], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 20], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [fp + -5] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 22], ap++;
[ap + 0] = [[fp + -5] + 23], ap++;
ret;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
ret;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -28], ap++;
jmp rel 45;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -19] + 1270, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -12] + 2480, ap++;
call rel 3482;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 2680, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 3890, ap++;
call rel 3467;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 3459;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 2510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 209;
[fp + -6] = [ap + 0] + 2510, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 186;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -7] + 2], ap++;
[ap + -5] = [[fp + -7] + 3];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 163 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 1];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 2];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 3358;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 3423;
[ap + 0] = [ap + -1] + 3422, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13120, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 3];
jmp rel 116;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 3];
[ap + 0] = 1418015208620934002485891016388288854760686469483472442557500962310253267398, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -15] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 4], ap++;
[ap + -4] = [[fp + -7] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 6];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 5], ap++;
[ap + -7] = [[fp + -7] + 6];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -12] = [[fp + -5] + 1];
[ap + -2] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 6], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 7], ap++;
[ap + -4] = [[fp + -7] + 8], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 9];
jmp rel 28;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 7], ap++;
[ap + -3] = [[fp + -7] + 8], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 9];
[ap + 0] = [[fp + -5] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -8] = [[ap + -1] + 0];
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = [ap + -4] + 800, ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 2584;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 26;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -11] + 1000, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 2310, ap++;
call rel 3241;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 3232;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 9080 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202376, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 487;
[fp + -6] = [ap + 0] + 9080, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 464;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 443;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 412;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 4], ap++;
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 6];
jmp rel 385 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 4];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 368;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + 3] = [[fp + -7] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 7];
jmp rel 341 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 315;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 6], ap++;
[ap + 3] = [[fp + -7] + 7], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 8];
jmp rel 288 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 6];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 271;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 7], ap++;
[ap + 3] = [[fp + -7] + 8], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 9];
jmp rel 244 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 7];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 218;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 8], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -7] + 9], ap++;
[ap + -5] = [[fp + -7] + 10];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 195 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 8];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -7] + 9];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 166;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 10], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -7] + 11], ap++;
[ap + -5] = [[fp + -7] + 12];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 143 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 10];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -7] + 11];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 114;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 12], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -7] + 13], ap++;
[ap + -5] = [[fp + -7] + 14];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 91 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 12];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 13];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 2909;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 14, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 2974;
[ap + 0] = [ap + -1] + 2973, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 62010, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -55] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -56] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 14];
jmp rel 44;
[ap + -56] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 14];
[ap + 0] = [fp + -7] + 15, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -25], ap++;
call rel -1179;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 15, ap++;
[ap + 0] = [ap + -59], ap++;
jmp rel 155;
[ap + 0] = [fp + -7] + 15, ap++;
[ap + 0] = [ap + -52] + 1000, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -44] + 2310, ap++;
call rel 2839;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [ap + -46] + 2040, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = [ap + -38] + 3350, ap++;
call rel 2823;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 11, ap++;
[ap + 0] = [ap + -40] + 3080, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -32] + 4390, ap++;
call rel 2807;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = [ap + -34] + 3750, ap++;
jmp rel 18;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -27] + 5060, ap++;
jmp rel 12;
[ap + 0] = [fp + -7] + 9, ap++;
[ap + 0] = [ap + -29] + 4520, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -22] + 5930, ap++;
call rel 2779;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -24] + 5290, ap++;
jmp rel 18;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -17] + 6600, ap++;
jmp rel 12;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -19] + 6060, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -12] + 7470, ap++;
call rel 2751;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 7670, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 8880, ap++;
call rel 2735;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2726;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1630829733775233318195679090436104892768056024564011680791087339675912017005, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
[fp + -4] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[fp + -3] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -1] + 10, ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1630829733775233318195679090436104892768056024564011680791087339675912017005, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 6], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 8;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -2] + 820, ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 1900;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 6], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 8;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -2] + 820, ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 1826;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 124 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -4] = [[fp + -4] + 6];
[ap + -3] = [[fp + -4] + 7];
[ap + -2] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 99 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 11], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 70;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + -1] = [ap + 0] + [ap + -8], ap++;
jmp rel 45 if [ap + -1] != 0;
ap += 2;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 12];
[ap + -4] = [[fp + -4] + 13];
[ap + -3] = [[fp + -4] + 14];
[ap + -2] = [[fp + -4] + 15];
[fp + -3] = [[fp + -4] + 16];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 12) %}
[ap + 0] = [[fp + -4] + 18], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 17], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -4] + 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [[fp + -4] + 17], ap++;
[ap + 0] = [fp + -4] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 19], ap++;
[ap + 0] = [[fp + -4] + 20], ap++;
ret;
call rel 2424;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
call rel 1697;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 17;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
ret;
ap += 22;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1630829733775233318195679090436104892768056024564011680791087339675912017005, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 140 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 111;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -2] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 83 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 11], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -5] = [[ap + -1] + 0];
[ap + 0] = [[ap + -2] + 3], ap++;
[ap + -1] = [[ap + -2] + 1];
[fp + -4] = [[ap + -2] + 2];
[fp + -3] = [[ap + -2] + 3];
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = 1555377517929037318987687899825758707538299441176447799544473656894800517992, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 4, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -6] + 12];
[ap + -5] = [[fp + -6] + 13];
[ap + -17] = [[fp + -6] + 14];
[ap + -4] = [[fp + -6] + 15];
[ap + -3] = [[fp + -6] + 16];
[ap + -2] = [[fp + -6] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 12) %}
[ap + 0] = [[fp + -6] + 19], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 20], ap++;
[ap + 0] = [[fp + -6] + 21], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 27;
ap += 5;
[ap + 0] = [[ap + -8] + 0], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 18], ap++;
[ap + 0] = [ap + -1] + 350, ap++;
jmp rel 5;
[ap + 0] = [[fp + -6] + 18], ap++;
[ap + 0] = [ap + -1] + 450, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 2280;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -6] + 18], ap++;
[ap + 0] = [fp + -6] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 11;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -6] + 18], ap++;
[ap + 0] = [fp + -6] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 20], ap++;
[ap + 0] = [[fp + -6] + 21], ap++;
ret;
ap += 20;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
ret;
ap += 14;
call rel 1524;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 29;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 224 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -4] = [[fp + -6] + 6];
[ap + -3] = [[fp + -6] + 7];
[ap + -2] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 199 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 11], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 170;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + -1] = [ap + 0] + [ap + -8], ap++;
jmp rel 143 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1630829733775233318195679090436104892768056024564011680791087339675912017005, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 12];
[ap + -4] = [[fp + -6] + 13];
[ap + -3] = [[fp + -6] + 14];
[ap + -2] = [[fp + -6] + 15];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 12) %}
[ap + 0] = [[fp + -6] + 17], ap++;
jmp rel 117 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 18], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 3], ap++;
[ap + -4] = [[fp + -8] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 5];
jmp rel 88;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 3], ap++;
[ap + -3] = [[fp + -8] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 5];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -5] = [[ap + -1] + 0];
[fp + -4] = [[ap + -1] + 1];
[fp + -3] = [[ap + -1] + 2];
[ap + 0] = [[fp + -6] + 16], ap++;
[ap + 0] = 232670485425082704932579856502088130646006032362877466777181098476241604910, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -6] + 19];
[ap + -5] = [[fp + -6] + 20];
[ap + -12] = [[fp + -6] + 21];
[ap + -4] = [[fp + -6] + 22];
[ap + -3] = [[fp + -6] + 23];
[ap + -2] = [[fp + -6] + 24];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 19) %}
[ap + 0] = [[fp + -6] + 26], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 27], ap++;
[ap + 0] = [[fp + -6] + 28], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 27;
ap += 5;
[ap + 0] = [[ap + -8] + 0], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 25], ap++;
[ap + 0] = [ap + -1] + 350, ap++;
jmp rel 5;
[ap + 0] = [[fp + -6] + 25], ap++;
[ap + 0] = [ap + -1] + 450, ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] + 29, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 2079;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [[fp + -6] + 25], ap++;
[ap + 0] = [fp + -6] + 29, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 11;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [[fp + -6] + 25], ap++;
[ap + 0] = [fp + -6] + 29, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 27], ap++;
[ap + 0] = [[fp + -6] + 28], ap++;
ret;
ap += 9;
call rel 1335;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
[ap + 0] = [fp + -6] + 19, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 24;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
[ap + 0] = [fp + -6] + 20, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 18], ap++;
[ap + 0] = [[fp + -6] + 19], ap++;
ret;
ap += 21;
call rel 2022;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 23;
call rel 1295;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 38;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
ret;
ap += 43;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
ret;
%{ memory[ap + 0] = 4090 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207366, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 207;
[fp + -6] = [ap + 0] + 4090, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 185;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 164;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 134;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 4], ap++;
[ap + -4] = [[fp + -7] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 6];
jmp rel 113;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 6];
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1841;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1907;
[ap + 0] = [ap + -1] + 1906, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 20900 <= memory[ap + -24] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -25] = [ap + 0] + 20900, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 7];
jmp rel 67;
[ap + -25] = [ap + 0] + 20900, ap++;
[ap + -1] = [[fp + -7] + 7];
[ap + 0] = 0, ap++;
[ap + 0] = 1630829733775233318195679090436104892768056024564011680791087339675912017005, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -4] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
[ap + -27] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[ap + -23] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
ret;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -28], ap++;
jmp rel 45;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -19] + 1270, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -12] + 2480, ap++;
call rel 1771;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 2680, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 3890, ap++;
call rel 1756;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1748;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768210186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 117;
[fp + -6] = [ap + 0] + 1270, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1678;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1744;
[ap + 0] = [ap + -1] + 1743, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 11610 <= memory[ap + -6] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -7] = [ap + 0] + 11610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 1];
jmp rel 79;
[ap + -7] = [ap + 0] + 11610, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = 0, ap++;
[ap + 0] = 1630829733775233318195679090436104892768056024564011680791087339675912017005, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -4] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 6], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -4] = [[fp + -7] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 4];
jmp rel 26;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -3] = [[fp + -7] + 3], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 4];
[ap + 0] = [[fp + -5] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -8] = [[ap + -1] + 0];
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -3] + 800, ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 940;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 5;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1613;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768210186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 117;
[fp + -6] = [ap + 0] + 1270, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1543;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1609;
[ap + 0] = [ap + -1] + 1608, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 11610 <= memory[ap + -6] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -7] = [ap + 0] + 11610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 1];
jmp rel 79;
[ap + -7] = [ap + 0] + 11610, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = 0, ap++;
[ap + 0] = 907111799109225873672206001743429201758838553092777504370151546632448000192, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -4] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 6], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -4] = [[fp + -7] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 4];
jmp rel 26;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -3] = [[fp + -7] + 3], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 4];
[ap + 0] = [[fp + -5] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -8] = [[ap + -1] + 0];
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -3] + 800, ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 805;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 5;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1478;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 2680 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208776, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 121;
[fp + -6] = [ap + 0] + 2680, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 99;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 78;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1377;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1443;
[ap + 0] = [ap + -1] + 1442, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 34240 <= memory[ap + -15] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -16] = [ap + 0] + 34240, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 32;
[ap + -16] = [ap + 0] + 34240, ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -1117;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 25;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 1270, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 2480, ap++;
call rel 1347;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1339;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 219;
[fp + -6] = [ap + 0] + 4220, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 197;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 176;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 146;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 4], ap++;
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 6];
jmp rel 119 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 4];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 102;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + 3] = [[fp + -7] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 7];
jmp rel 75 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1174;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1240;
[ap + 0] = [ap + -1] + 1239, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 36110 <= memory[ap + -25] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -26] = [ap + 0] + 36110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 6];
jmp rel 34;
[ap + -26] = [ap + 0] + 36110, ap++;
[ap + -1] = [[fp + -7] + 6];
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -16], ap++;
call rel -1182;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -29], ap++;
jmp rel 57;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -24] + 430, ap++;
jmp rel 18;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -17] + 1740, ap++;
jmp rel 12;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -19] + 1200, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -12] + 2610, ap++;
call rel 1125;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 2810, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 4020, ap++;
call rel 1110;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1102;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 219;
[fp + -6] = [ap + 0] + 4220, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 197;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 176;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 146;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 4], ap++;
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 6];
jmp rel 119 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 4];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 102;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + 3] = [[fp + -7] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 7];
jmp rel 75 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 937;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 1003;
[ap + 0] = [ap + -1] + 1002, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 48220 <= memory[ap + -25] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -26] = [ap + 0] + 48220, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 6];
jmp rel 34;
[ap + -26] = [ap + 0] + 48220, ap++;
[ap + -1] = [[fp + -7] + 6];
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -16], ap++;
call rel -1257;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -29], ap++;
jmp rel 57;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -24] + 430, ap++;
jmp rel 18;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -17] + 1740, ap++;
jmp rel 12;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -19] + 1200, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -12] + 2610, ap++;
call rel 888;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 2810, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 4020, ap++;
call rel 873;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 865;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 155801121779312277930962096923588980599, ap++;
call rel 873;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[fp + -3] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 117 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -6] + 0], ap++;
[ap + 3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -6] + 2];
jmp rel 77 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -6] + 0];
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 13], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -6] + 1], ap++;
[ap + 3] = [[fp + -6] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -6] + 3];
jmp rel 19 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -6] + 1];
ap += 16;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -2] + 2080, ap++;
[ap + 0] = [fp + -4] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -6] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 14, ap++;
jmp rel 23;
ap += 19;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
ret;
ap += 7;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -2] + 11300, ap++;
[ap + 0] = [fp + -4] + 7, ap++;
call rel 761;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 26;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 7269940625183577871052929410204041567614516, ap++;
call rel 731;
ret;
[ap + 0] = 7269940625183576326045731942707956293120310, ap++;
call rel 726;
ret;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
call rel 721;
ret;
[ap + 0] = 5282231170384877125, ap++;
call rel 716;
ret;
[ap + 0] = 1179995212, ap++;
call rel 711;
ret;
[ap + 0] = 155775200859838811096160292336445452151, ap++;
call rel 706;
ret;
[ap + 0] = 4478288, ap++;
call rel 701;
ret;
[ap + 0] = 73995027432772, ap++;
call rel 696;
ret;
[ap + 0] = 86102623733069, ap++;
call rel 691;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[fp + -3] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 117 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -6] + 0], ap++;
[ap + 3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -6] + 2];
jmp rel 77 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -6] + 0];
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 13], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -6] + 1], ap++;
[ap + 3] = [[fp + -6] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -6] + 3];
jmp rel 19 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -6] + 1];
ap += 16;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -2] + 2080, ap++;
[ap + 0] = [fp + -4] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -6] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 14, ap++;
jmp rel 23;
ap += 19;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
ret;
ap += 7;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -2] + 11300, ap++;
[ap + 0] = [fp + -4] + 7, ap++;
call rel 579;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 26;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 71800299277908, ap++;
call rel 549;
ret;
[ap + 0] = 5642821626297142348, ap++;
call rel 544;
ret;
call rel 553;
[ap + 0] = [ap + -1] + 552, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28000, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -8] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -8] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 225;
[fp + -8] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -4] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 1];
jmp rel 197;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = 0, ap++;
[ap + 0] = 725830221483990777176774397100391313622024035615321701228361226644626740815, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -6] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 172 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -9] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -9] + 3], ap++;
[ap + -5] = [[fp + -9] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 142 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -9] + 2];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -9] + 3];
[ap + 0] = [ap + -3] * 65536, ap++;
[ap + 0] = 240674840150100245343259713824179624551841216416497769188531853723120415523, ap++;
[ap + 0] = [ap + -2] + [fp + -5], ap++;
[ap + -2] = [[fp + -7] + 0];
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 4], ap++;
[ap + -4] = [[fp + -9] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 6];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 4], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 5], ap++;
[ap + -7] = [[fp + -9] + 6];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -3] = [[fp + -6] + 8];
[ap + -2] = [[fp + -6] + 9];
[ap + -4] = [[fp + -6] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 75 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 13], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 8 if [ap + -1] != 0;
ap += 1;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 16;
[fp + -3] = [ap + 0] + 65535, ap++;
jmp rel 8 if [ap + -1] != 0;
ap += 3;
[ap + 0] = [ap + -8] + 2150, ap++;
jmp rel 12;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + -5] = [ap + 0] + 65535, ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [ap + -3] + 1970, ap++;
call rel -324;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6] + 14, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6] + 14, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -8], ap++;
call rel -182;
ret;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
ret;
call rel -389;
[ap + 0] = [fp + -9] + 5, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -9] + 2, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
call rel 332;
[ap + 0] = [ap + -1] + 331, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 27930, ap++;
[ap + 0] = [fp + -9] + 2, ap++;
[ap + 0] = [ap + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
call rel 282;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -6] * memory[fp + -4], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 0], ap++;
[ap + -2] = [[fp + -7] + 1], ap++;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -4], ap++;
[ap + 0] = [ap + -4] * [fp + -4], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 3], ap++;
[ap + -1] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 6], ap++;
[ap + -3] = [[fp + -7] + 7], ap++;
[ap + -16] = [[fp + -7] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -6] * memory[fp + -3], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 9], ap++;
[ap + -2] = [[fp + -7] + 10], ap++;
[ap + -2] = [[fp + -7] + 11];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -3], ap++;
[ap + 0] = [ap + -4] * [fp + -3], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 12], ap++;
[ap + -1] = [[fp + -7] + 13], ap++;
[ap + -3] = [[fp + -7] + 14];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 15], ap++;
[ap + -3] = [[fp + -7] + 16], ap++;
[ap + -16] = [[fp + -7] + 17];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -5] * memory[fp + -4], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -5], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 18], ap++;
[ap + -2] = [[fp + -7] + 19], ap++;
[ap + -2] = [[fp + -7] + 20];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -5] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -4], ap++;
[ap + 0] = [ap + -4] * [fp + -4], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 21], ap++;
[ap + -1] = [[fp + -7] + 22], ap++;
[ap + -3] = [[fp + -7] + 23];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 24], ap++;
[ap + -3] = [[fp + -7] + 25], ap++;
[ap + -16] = [[fp + -7] + 26];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
[ap + 1] = [ap + -51] + [ap + -33], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 27];
jmp rel 77;
[ap + -1] = [[fp + -7] + 27];
jmp rel 63 if [ap + -36] != 0;
jmp rel 6 if [ap + -19] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 28];
jmp rel 11;
[ap + -1] = [[fp + -7] + 28];
ap += 5;
[ap + 0] = [fp + -7] + 29, ap++;
[ap + 0] = 0, ap++;
jmp rel 25;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 29];
jmp rel 11;
[ap + -1] = [[fp + -7] + 29];
ap += 1;
[ap + 0] = [fp + -7] + 30, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 30, ap++;
[ap + 0] = 1, ap++;
jmp rel 12;
ap += 8;
jmp rel 4;
ap += 11;
[ap + 0] = [fp + -7] + 28, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 9;
ap += 12;
[ap + 0] = [fp + -7] + 28, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -2] + [ap + -34], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 11;
[ap + -1] = [[ap + -5] + 0];
ap += 1;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 5420154128225384396790819266608, ap++;
call rel 78;
ret;
[ap + 0] = 39879774624083218221772669863277689073527, ap++;
call rel 73;
ret;
[ap + 0] = 1444562336327655507268, ap++;
call rel 68;
ret;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
call rel 63;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492920, ap++;
call rel 58;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492919, ap++;
call rel 53;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492918, ap++;
call rel 48;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492917, ap++;
call rel 43;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492916, ap++;
call rel 38;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
call rel 33;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
call rel 28;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
call rel 23;
ret;
[ap + 0] = 375233589013918064796019, ap++;
call rel 18;
ret;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
call rel 13;
ret;
[ap + 0] = 1444562336370756830546, ap++;
call rel 8;
ret;
[ap + 0] = 7891998437966260601762371672023996916393715052535837300, ap++;
call rel 3;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
ret;
[ap + 0] = 476442828812030857794232422692155113556837216824, ap++;
call rel -9;
ret;
